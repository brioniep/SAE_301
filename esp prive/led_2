#include <ESP8266WiFi.h>
#include <PubSubClient.h>
#include <WiFiManager.h>

const char* mqtt_server = "toto.local";
const char* mqtt_user = "toto";
const char* mqtt_password = "toto";

WiFiClient espClient;
PubSubClient client(espClient);

unsigned long lastMsg = 0;
#define MSG_BUFFER_SIZE (50)
char msg[MSG_BUFFER_SIZE];

#define BUTTON_PIN 14
int button_state = 0;
int last_button_state = HIGH;
bool led_state = false;

void setup_wifi() {
  WiFiManager wifiManager;
  wifiManager.autoConnect("ESP8266_Control");
  Serial.println("Connecté au WiFi");
}

void callback(char* topic, byte* payload, unsigned int length) {
  Serial.print("Message reçu [");
  Serial.print(topic);
  Serial.print("] ");

  String messageTemp;
  for (int i = 0; i < length; i++) {
    messageTemp += (char)payload[i];
  }
  Serial.println(messageTemp);

  if (String(topic) == "IUT/on/off/led_2") {
    if (messageTemp == "led_2_on") {
      digitalWrite(BUILTIN_LED, LOW);
      led_state = true;
      Serial.println("LED ON");
    } else if (messageTemp == "led_2_off") {
      digitalWrite(BUILTIN_LED, HIGH);
      led_state = false;
      Serial.println("LED OFF");
    }
  }
}

void reconnect() {
  while (!client.connected()) {
    Serial.print("Connexion au serveur MQTT...");
    String clientId = "ESP8266Client-";
    clientId += String(random(0xffff), HEX);
    if (client.connect(clientId.c_str(), mqtt_user, mqtt_password)) {
      Serial.println("connecté");
      client.subscribe("IUT/on/off/led_2");
      client.subscribe("IUT/etat/led_2");
    } else {
      Serial.print("échec, rc=");
      Serial.print(client.state());
      Serial.println(" nouvelle tentative dans 5 secondes");
      delay(5000);
    }
  }
}

void setup() {
  pinMode(BUILTIN_LED, OUTPUT);
  digitalWrite(BUILTIN_LED, HIGH);
  Serial.begin(115200);
  setup_wifi();
  client.setServer(mqtt_server, 1883);
  client.setCallback(callback);
  pinMode(BUTTON_PIN, INPUT_PULLUP);
}

void loop() {
  button_state = digitalRead(BUTTON_PIN);
  if (button_state == LOW && last_button_state == HIGH) {
    led_state = !led_state;
    if (led_state) {
      digitalWrite(BUILTIN_LED, LOW);
      client.publish("IUT/etat/led_2", "led_2_on");
    } else {
      digitalWrite(BUILTIN_LED, HIGH);
      client.publish("IUT/etat/led_2", "led_2_off");
    }
    delay(50);
  }
  last_button_state = button_state;

  if (!client.connected()) {
    reconnect();
  }
  client.loop();
}
